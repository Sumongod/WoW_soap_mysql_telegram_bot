import logging
import asyncio
import requests
import xml.etree.ElementTree as ET
import re
import mysql.connector
from datetime import datetime
from html import escape
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# === –ö–û–ù–§–ò–ì ===
load_dotenv()

TOKEN = os.getenv("TOKEN")
SOAP_URL = os.getenv("SOAP_URL")
SOAP_USER = os.getenv("SOAP_USER")
SOAP_PASS = os.getenv("SOAP_PASS")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(',') if x]

DB_CONFIG = {
    "host": os.getenv("DB_HOST", "localhost"),
    "user": os.getenv("DB_USER", "acore"),
    "password": os.getenv("DB_PASSWORD", "acore"),
    "database": os.getenv("DB_DATABASE", "acore_auth")
}

# === –õ–û–ì–ò ===
logging.basicConfig(
    level=logging.INFO,
    filename="bot.log",
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8"
)

# === FSM ===
class RegState(StatesGroup):
    credentials = State()

class PasswordChangeState(StatesGroup):
    new_password = State()

class AdminCommandState(StatesGroup):
    command = State()

class ServiceState(StatesGroup):
    character_name = State()
    service_type = State()

# === SOAP ===
# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SOAP-–∫–æ–º–∞–Ω–¥—É –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    # –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
def send_soap_command(command: str) -> str:
    headers = {'Content-Type': 'text/xml'}
    payload = f"""<?xml version="1.0" encoding="utf-8"?>
    <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                   xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
      <soap:Body>
        <executeCommand xmlns="urn:AC">
          <command>{command}</command>
        </executeCommand>
      </soap:Body>
    </soap:Envelope>"""

    try:
        response = requests.post(
            SOAP_URL,
            auth=(SOAP_USER, SOAP_PASS),
            data=payload,
            headers=headers,
            timeout=5
        )

        if not response.ok:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} ‚Äî {response.reason}"

        root = ET.fromstring(response.content)
        result_element = root.find('.//result')
        if result_element is None:
            return f"‚ùå –û—à–∏–±–∫–∞: <result> –Ω–µ –Ω–∞–π–¥–µ–Ω."
        return result_element.text.strip() if result_element.text else ""

    except Exception as e:
        return f"‚ùå SOAP –æ—à–∏–±–∫–∞: {e}"

# === PARSE INFO ===
# –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ SOAP-–æ—Ç–≤–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∞–ø—Ç–∞–π–º
    # –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É.
def parse_server_info(result: str) -> str:
    players = re.search(r"Connected players:\s*(\d+)", result)
    characters = re.search(r"Characters in world:\s*(\d+)", result)
    uptime = re.search(r"Server uptime:\s*(.+?)\r", result)

    players_text = f"üë• –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤: {players.group(1)}" if players else "‚ùì –ò–≥—Ä–æ–∫–∏: ?"
    chars_text = f"üåç –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –º–∏—Ä–µ: {characters.group(1)}" if characters else "‚ùì –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: ?"
    uptime_text = f"‚è± –ê–ø—Ç–∞–π–º: {uptime.group(1)}" if uptime else "‚ùì –ê–ø—Ç–∞–π–º: ?"

    return f"{players_text}\n{chars_text}\n{uptime_text}"

# === MYSQL ===
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –≤ MySQL –±–∞–∑–µ.
def is_account_exists(username: str) -> bool:
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM account WHERE username = %s", (username,))
        exists = cursor.fetchone() is not None
        conn.close()
        return exists
    except Exception as e:
        logging.error(f"MySQL check error: {e}")
        return False

# –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –∫ –∞–∫–∫–∞—É–Ω—Ç—É, –∑–∞–ø–∏—Å—ã–≤–∞—è –µ–≥–æ –≤ –ø–æ–ª–µ email –≤ –±–∞–∑–µ.
def set_telegram_email(username: str, telegram_id: int):
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE account SET email = %s WHERE username = %s",
            (str(telegram_id), username)
        )
        conn.commit()
        conn.close()
    except Exception as e:
        logging.error(f"MySQL update error: {e}")

# –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ Telegram ID –∏–∑ –ø–æ–ª—è email.
def get_username_by_telegram_id(telegram_id: int) -> str | None:
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("SELECT username FROM account WHERE email = %s", (str(telegram_id),))
        row = cursor.fetchone()
        conn.close()
        return row[0] if row else None
    except Exception as e:
        logging.error(f"MySQL lookup error: {e}")
        return None

# === –•–ï–ù–î–õ–ï–†–´ ===
router = Router()

reply_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üì• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), KeyboardButton(text="üîê –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è")],
    [KeyboardButton(text="üë• –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏")],
    [KeyboardButton(text="üõé –£—Å–ª—É–≥–∏"), KeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")]
], resize_keyboard=True)

@router.message(F.text == "/start")
async def cmd_start(msg: Message):
    telegram_id = msg.from_user.id
    is_registered = get_username_by_telegram_id(telegram_id) is not None

    if not is_registered:
        buttons = [[KeyboardButton(text="üì• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]]
    else:
        buttons = [
            [KeyboardButton(text="üîê –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è")],
            [KeyboardButton(text="üë• –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏")],
            [KeyboardButton(text="üõé –£—Å–ª—É–≥–∏"), KeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")]
        ]

    reply_kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç WoWSeRVeR (set realmlist wowserver.ru) –≤—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_kb)

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è.
@router.message(F.text == "üì• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def handle_register(msg: Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    await state.set_state(RegState.credentials)

@router.message(RegState.credentials)
async def process_registration(msg: Message, state: FSMContext):
    parts = msg.text.strip().split()
    if len(parts) != 2:
        await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
        return

    login, password = parts
    telegram_id = msg.from_user.id
    existing_login = get_username_by_telegram_id(telegram_id)

    if existing_login:
        await msg.answer(f"üîê –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º <b>{existing_login}</b>.")
    elif is_account_exists(login):
        await msg.answer("‚ùå –õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç.")
    else:
        result = send_soap_command(f"account create {login} {password}")
        set_telegram_email(login, telegram_id)
        await msg.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:\n{escape(result)}")
    await state.clear()

@router.message(F.text == "üîê –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è")
async def handle_change_pass(msg: Message, state: FSMContext):
    username = get_username_by_telegram_id(msg.from_user.id)
    if not username:
        await msg.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
    await state.set_state(PasswordChangeState.new_password)

@router.message(PasswordChangeState.new_password)
async def process_change_pass(msg: Message, state: FSMContext):
    username = get_username_by_telegram_id(msg.from_user.id)
    password = msg.text.strip()
    result = send_soap_command(f"account set password {username} {password} {password}")
    if "The password was changed" in result:
        result = "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω."
    await msg.answer(result)
    await state.clear()

@router.message(F.text == "üë• –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏")
async def handle_online(msg: Message):
    result = send_soap_command("server info")
    parsed = parse_server_info(result)
    await msg.answer(parsed)

@router.message(F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def handle_admin(msg: Message, state: FSMContext):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ SOAP –∫–æ–º–∞–Ω–¥—É:")
    await state.set_state(AdminCommandState.command)

@router.message(AdminCommandState.command)
async def execute_admin_command(msg: Message, state: FSMContext):
    result = send_soap_command(msg.text.strip())
    await msg.answer(f"<pre>{escape(result)}</pre>")
    await state.clear()

@router.message(F.text == "üõé –£—Å–ª—É–≥–∏")
async def show_services(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÅ –°–º–µ–Ω–∞ –ø–æ–ª–∞"), KeyboardButton(text="üîÑ –°–º–µ–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏–∏")],
            [KeyboardButton(text="üßë‚Äçüé® –°–º–µ–Ω–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏"), KeyboardButton(text="üìç –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è")]
        ],
        resize_keyboard=True
    ))

@router.message(F.text.in_(["üîÅ –°–º–µ–Ω–∞ –ø–æ–ª–∞", "üîÑ –°–º–µ–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏–∏", "üßë‚Äçüé® –°–º–µ–Ω–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏", "üìç –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è"]))
async def select_service(msg: Message, state: FSMContext):
    service_map = {
        "üîÅ –°–º–µ–Ω–∞ –ø–æ–ª–∞": "gender",
        "üîÑ –°–º–µ–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏–∏": "faction",
        "üßë‚Äçüé® –°–º–µ–Ω–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏": "customize",
        "üìç –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è": "teleport"
    }
    service = service_map.get(msg.text)
    await state.update_data(service=service)
    await state.set_state(ServiceState.character_name)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")

@router.message(ServiceState.character_name)
async def apply_service(msg: Message, state: FSMContext):
    data = await state.get_data()
    char_name = msg.text.strip()
    service = data.get("service")

    service_map = {
        "gender": "character customize",
        "faction": "character changefaction",
        "customize": "character customize",
        "teleport": "teleport name $home"
    }

    command = service_map.get(service)
    if not command:
        await msg.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞.")
        await state.clear()
        return

    result = send_soap_command(f"{command.replace('$home', '').strip()} {char_name} $home" if service == "teleport" else f"{command} {char_name}")

    if "does not exist" in result.lower():
        await msg.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif "500" in result.lower():
        await msg.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await msg.answer(f"‚úÖ –£—Å–ª—É–≥–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ <b>{char_name}</b>:\n<pre>{escape(result)}</pre>")

    await state.clear()

# === –ó–ê–ü–£–°–ö ===
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot = Bot(
        token=TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher(storage=MemoryStorage())
    # –ó–¥–µ—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–∏–∫–∞ –≤—Å—è –≤ main.py
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
