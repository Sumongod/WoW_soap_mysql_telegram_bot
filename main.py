import logging
import asyncio
import requests
import xml.etree.ElementTree as ET
import re
import mysql.connector
from datetime import datetime
from html import escape
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# === –ö–û–ù–§–ò–ì ===
load_dotenv()

TOKEN = os.getenv("TOKEN")
SOAP_URL = os.getenv("SOAP_URL")
SOAP_USER = os.getenv("SOAP_USER")
SOAP_PASS = os.getenv("SOAP_PASS")

DB_CONFIG = {
    "host": os.getenv("DB_HOST", "localhost"),
    "user": os.getenv("DB_USER", "acore"),
    "password": os.getenv("DB_PASSWORD", "acore"),
    "database": os.getenv("DB_DATABASE", "acore_auth")
}

# === –õ–û–ì–ò ===
logging.basicConfig(
    level=logging.INFO,
    filename="bot.log",
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8"
)

# === FSM ===
class RegState(StatesGroup):
    credentials = State()

class PasswordChangeState(StatesGroup):
    new_password = State()

class AdminCommandState(StatesGroup):
    command = State()

class ServiceState(StatesGroup):
    character_name = State()
    service_type = State()

# === SOAP ===
def send_soap_command(command: str) -> str:
    headers = {'Content-Type': 'text/xml'}
    payload = f"""<?xml version="1.0" encoding="utf-8"?>
    <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                   xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
      <soap:Body>
        <executeCommand xmlns="urn:AC">
          <command>{command}</command>
        </executeCommand>
      </soap:Body>
    </soap:Envelope>"""

    try:
        response = requests.post(
            SOAP_URL,
            auth=(SOAP_USER, SOAP_PASS),
            data=payload,
            headers=headers,
            timeout=5
        )

        if not response.ok:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} ‚Äî {response.reason}"

        root = ET.fromstring(response.content)
        result_element = root.find('.//result')
        if result_element is None:
            return f"‚ùå –û—à–∏–±–∫–∞: <result> –Ω–µ –Ω–∞–π–¥–µ–Ω."
        return result_element.text.strip() if result_element.text else ""

    except Exception as e:
        return f"‚ùå SOAP –æ—à–∏–±–∫–∞: {e}"

# === PARSE INFO ===
def parse_server_info(result: str) -> str:
    players = re.search(r"Connected players:\s*(\d+)", result)
    characters = re.search(r"Characters in world:\s*(\d+)", result)
    uptime = re.search(r"Server uptime:\s*(.+?)\r", result)

    players_text = f"üë• –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤: {players.group(1)}" if players else "‚ùì –ò–≥—Ä–æ–∫–∏: ?"
    chars_text = f"üåç –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –º–∏—Ä–µ: {characters.group(1)}" if characters else "‚ùì –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: ?"
    uptime_text = f"‚è± –ê–ø—Ç–∞–π–º: {uptime.group(1)}" if uptime else "‚ùì –ê–ø—Ç–∞–π–º: ?"

    return f"{players_text}\n{chars_text}\n{uptime_text}"

# === MYSQL ===
def is_account_exists(username: str) -> bool:
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM account WHERE username = %s", (username,))
        exists = cursor.fetchone() is not None
        conn.close()
        return exists
    except Exception as e:
        logging.error(f"MySQL check error: {e}")
        return False

def set_telegram_email(username: str, telegram_id: int):
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE account SET email = %s WHERE username = %s",
            (str(telegram_id), username)
        )
        conn.commit()
        conn.close()
    except Exception as e:
        logging.error(f"MySQL update error: {e}")

def get_username_by_telegram_id(telegram_id: int) -> str | None:
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("SELECT username FROM account WHERE email = %s", (str(telegram_id),))
        row = cursor.fetchone()
        conn.close()
        return row[0] if row else None
    except Exception as e:
        logging.error(f"MySQL lookup error: {e}")
        return None

def get_characters_by_telegram_id(telegram_id: int) -> list[tuple[str, int]]:
    """Return list of (name, level) tuples for characters owned by telegram user."""
    try:
        conn_auth = mysql.connector.connect(**DB_CONFIG)
        cursor_auth = conn_auth.cursor()
        cursor_auth.execute(
            "SELECT id FROM account WHERE email = %s",
            (str(telegram_id),),
        )
        row = cursor_auth.fetchone()
        conn_auth.close()

        if not row:
            return []

        account_id = row[0]
        char_config = DB_CONFIG.copy()
        char_config["database"] = "acore_characters"
        conn_chars = mysql.connector.connect(**char_config)
        cursor_chars = conn_chars.cursor()
        cursor_chars.execute(
            "SELECT name, level FROM characters WHERE account = %s",
            (account_id,),
        )
        chars = [(row[0], row[1]) for row in cursor_chars.fetchall()]
        conn_chars.close()

        return chars
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
        return []

def is_character_owned_by_user(char_name: str, telegram_id: int) -> bool:
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM account WHERE email = %s", (str(telegram_id),))
        row = cursor.fetchone()
        conn.close()

        if not row:
            return False

        account_id = row[0]
        char_config = DB_CONFIG.copy()
        char_config["database"] = "acore_characters"
        conn_chars = mysql.connector.connect(**char_config)
        cursor_chars = conn_chars.cursor()
        cursor_chars.execute("SELECT COUNT(*) FROM characters WHERE name = %s AND account = %s", (char_name, account_id))
        result = cursor_chars.fetchone()
        conn_chars.close()

        return result[0] > 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        return False

def has_gm_access(telegram_id: int, level: int = 3) -> bool:
    """Check if user has GM access level >= level in account_access table."""
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM account WHERE email = %s", (str(telegram_id),))
        row = cursor.fetchone()
        if not row:
            conn.close()
            return False
        account_id = row[0]
        cursor.execute("SELECT gmlevel FROM account_access WHERE id = %s", (account_id,))
        gm_row = cursor.fetchone()
        conn.close()
        return bool(gm_row and gm_row[0] >= level)
    except Exception as e:
        logging.error(f"MySQL GM level check error: {e}")
        return False

# === –•–ï–ù–î–õ–ï–†–´ ===
router = Router()

@router.message(F.text == "üõé –£—Å–ª—É–≥–∏")
async def handle_services(msg: Message):
    buttons = [
        [KeyboardButton(text="üîÅ –°–º–µ–Ω–∞ –ø–æ–ª–∞"), KeyboardButton(text="üîÑ –°–º–µ–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏–∏")],
        [KeyboardButton(text="üßë‚Äçüé® –°–º–µ–Ω–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏"), KeyboardButton(text="üìç –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è")]
    ]
    kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb)

@router.message(F.text.in_(["üîÅ –°–º–µ–Ω–∞ –ø–æ–ª–∞", "üîÑ –°–º–µ–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏–∏", "üßë‚Äçüé® –°–º–µ–Ω–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏", "üìç –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è"]))
async def handle_service_selection(msg: Message, state: FSMContext):
    service_map = {
        "üîÅ –°–º–µ–Ω–∞ –ø–æ–ª–∞": "gender",
        "üîÑ –°–º–µ–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏–∏": "faction",
        "üßë‚Äçüé® –°–º–µ–Ω–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏": "customize",
        "üìç –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è": "teleport"
    }
    service = service_map[msg.text]
    await state.update_data(service=service)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    await state.set_state(ServiceState.character_name)

@router.message(ServiceState.character_name)
async def handle_apply_service(msg: Message, state: FSMContext):
    data = await state.get_data()
    char_name = msg.text.strip()
    service = data.get("service")

    if not is_character_owned_by_user(char_name, msg.from_user.id):
        await msg.answer("‚ùå –≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.")
        await state.clear()
        return

    service_map = {
        "gender": "character customize",
        "faction": "character changefaction",
        "customize": "character customize",
        "teleport": "teleport name $home"
    }

    command = service_map.get(service)
    if not command:
        await msg.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞.")
        await state.clear()
        return

    full_command = (
        f"teleport name {char_name} $home" if service == "teleport"
        else f"{command} {char_name}"
    )

    result = send_soap_command(full_command)

    if "does not exist" in result.lower():
        await msg.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif "500" in result.lower():
        await msg.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
       await msg.answer(f"‚úÖ –£—Å–ª—É–≥–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ <b>{char_name}</b>.")

    await state.clear()

@router.message(Command("start"))
async def cmd_start(msg: Message):
    telegram_id = msg.from_user.id
    is_registered = get_username_by_telegram_id(telegram_id) is not None

    if not is_registered:
        buttons = [[KeyboardButton(text="üì• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]]
    else:
        buttons = [
            [KeyboardButton(text="üîê –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è")],
            [KeyboardButton(text="üë• –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏")],
            [KeyboardButton(text="üìú –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏")],
            [KeyboardButton(text="üõé –£—Å–ª—É–≥–∏"), KeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")]
        ]

    reply_kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç WoWSeRVeR (set realmlist wowserver.ru) –≤—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_kb)

@router.message(F.text == "üìú –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏")
async def handle_my_chars(msg: Message):
    chars = get_characters_by_telegram_id(msg.from_user.id)
    if not chars:
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–ª–∏ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        lines = [f"‚Ä¢ {name} ‚Äî {level} —É—Ä." for name, level in chars]
        await msg.answer("üë§ –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:\n" + "\n".join(lines))

@router.message(F.text == "üë• –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏")
async def handle_online_players(msg: Message):
    result = send_soap_command("server info")
    parsed = parse_server_info(result)
    await msg.answer(parsed)

@router.message(F.text == "üì• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def handle_register(msg: Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    await state.set_state(RegState.credentials)

@router.message(RegState.credentials)
async def process_register(msg: Message, state: FSMContext):
    parts = msg.text.strip().split()
    if len(parts) != 2:
        await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
        return

    login, password = parts
    telegram_id = msg.from_user.id
    existing_login = get_username_by_telegram_id(telegram_id)

    if existing_login:
        await msg.answer(f"üîê –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º <b>{existing_login}</b>.")
    elif is_account_exists(login):
        await msg.answer("‚ùå –õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç.")
    else:
        result = send_soap_command(f"account create {login} {password}")
        set_telegram_email(login, telegram_id)
        await msg.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:\n{escape(result)}")
    await state.clear()

@router.message(F.text == "üîê –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è")
async def handle_change_pass(msg: Message, state: FSMContext):
    username = get_username_by_telegram_id(msg.from_user.id)
    if not username:
        await msg.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
    await state.set_state(PasswordChangeState.new_password)

@router.message(PasswordChangeState.new_password)
async def process_change_pass(msg: Message, state: FSMContext):
    username = get_username_by_telegram_id(msg.from_user.id)
    password = msg.text.strip()
    result = send_soap_command(f"account set password {username} {password} {password}")
    if "The password was changed" in result:
        result = "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω."
    await msg.answer(result)
    await state.clear()

@router.message(F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def handle_admin(msg: Message, state: FSMContext):
    if not has_gm_access(msg.from_user.id, 3):
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ SOAP –∫–æ–º–∞–Ω–¥—É:")
    await state.set_state(AdminCommandState.command)

@router.message(AdminCommandState.command)
async def execute_admin_command(msg: Message, state: FSMContext):
    result = send_soap_command(msg.text.strip())
    await msg.answer(f"<pre>{escape(result)}</pre>")
    await state.clear()

# === –ó–ê–ü–£–°–ö ===
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
